<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Codroc Blog</title>
  
  
  <link href="https://codroc.github.io/atom.xml" rel="self"/>
  
  <link href="https://codroc.github.io/"/>
  <updated>2021-03-26T13:09:00.006Z</updated>
  <id>https://codroc.github.io/</id>
  
  <author>
    <name>Codroc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pkg-config</title>
    <link href="https://codroc.github.io/2021/03/26/pkg-config/"/>
    <id>https://codroc.github.io/2021/03/26/pkg-config/</id>
    <published>2021-03-26T13:09:00.006Z</published>
    <updated>2021-03-26T13:09:00.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pkg-config"><a href="#pkg-config" class="headerlink" title="pkg-config"></a>pkg-config</h1><p>这个小工具一般来说需要自己下载，执行 <code>sudo apt install pkg-config</code> 就可以了！</p><h1 id="1-命令简介"><a href="#1-命令简介" class="headerlink" title="1. 命令简介"></a>1. 命令简介</h1><p>pkg-config 用于返回安装库的元信息</p><p>大家应该都知道一般用第三方库的时候，就少不了要使用到第三方的头文件和库文件。我们在编译、链接的时候，必须要指定这些头文件和库文件的位置。对于一个比较大的第三方库，其头文件和库文件的数量是比较多的，如果我们一个个手动地写，那将是相当的麻烦的。因此，pkg-config就应运而生了。pkg-config能够把这些头文件和库文件的位置指出来，给编译器使用。</p><p><strong>pkg-config</strong> 主要提供了下面几个功能：</p><ul><li>检查库的版本号。 如果所需要的库的版本不满足要求，它会打印出错误信息，避免链接错误版本的库文件</li><li>获得编译预处理参数，如宏定义、头文件的位置</li><li>获得链接参数，如库及依赖的其他库的位置，文件名及其他一些链接参数</li><li>自动加入所依赖的其他库的设置</li></ul><p>在大多数的系统中呢，<strong>pkg-config</strong> 会去 <code>/usr/lib/pkgconfig，/usr/share/pkgconfig，/usr/local/lib/pkgconfig，/usr/local/share/pkgconfig</code> 中寻找 <code>.pc</code> 后缀的元数据文件（metadata file）。而且不是所有的库安装好后都带有 <code>.pc</code> 文件的。如果 <code>.pc</code> 不在上述的任意一个目录中，那么可以通过往 <strong>PKG_CONFIG_PATH</strong> 环境变量中添加目录，例如：<code>$ export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/pkgconfig</code> </p><p>这样 <strong>pkg-config</strong> 就会在 <code>/opt/pkgconfig</code> 目录下寻找 <code>.pc</code> 文件了</p><p>另外还需要注意的是,上述环境变量的设置只对当前的终端窗口有效。为了让其永久生效，我们可以将上述命令写入到 <code>/etc/bash.bashrc</code> 等文件中，以方便后续使用</p><h1 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2. 注意点"></a>2. 注意点</h1><p>我在之前碰到过一个很奇怪的现象，那就是，通过 <strong>pkg-config</strong> 工具把一个源文件编译并且链接好了（和 so 文件链接）得到了可执行文件。当我执行这个文件的时候却告诉我有申明了却未定义的函数（方法）！这让我很纳闷，明明编译和链接都成功通过了，运行的时候怎么就报未定义的错误了呢？要是有这类错误不是在链接的时候就应该报了吗？我百思不得其解啊！</p><p>后来看到别人的博客上写的文章才发现 <strong>pkg-config</strong> 工作在编译时和链接时，它是不管运行时的！也就是说在运行程序的时候，如果需要动态加载共享库（so 文件），就要到系统已知的 so 库目录下去寻找。而如果你的共享库没有在系统已知的 so 库目录下，就会报未定义的错误</p><p>可以通过往 <strong>LD_LIBRARY_PATH</strong> 环境变量添加 so 库目录来解决这个问题</p><p>这里我们列出pkg-config与LD_LIBRARY_PATH的主要工作阶段：</p><ul><li>pkg-config: 编译时、 链接时</li><li>LD_LIBRARY_PATH: 链接时、 运行时</li></ul><p>总结：</p><p>库文件在链接（静态库和共享库）和运行（仅限于使用共享库的程序）时被使用，其搜索路径是在系统中进行设置的。一般 Linux 系统把 <code>/lib</code> 和 <code>/usr/lib</code> 这两个目录作为默认的库搜索路径，所以使用这两个目录中的库时不需要进行设置搜索路径即可直接使用。对于处于默认库搜索路径之外的库，需要将库的位置添加到库的搜索路径之中。设置库文件的搜索路径有下列两种方式，可任选其中一种使用：</p><ul><li>在环境变量 <strong>LD_LIBRARY_PATH</strong> 中指明库的搜索路径</li><li>在 <code>/etc/ld.so.conf 文件</code>中添加库的搜索路径</li></ul><p>将自己可能存放库文件的路径都加入到 <code>/etc/ld.so.conf 目录</code> 中是明智的选择。添加方法也及其简单，将库文件的绝对路径直接写进去就OK了，一行一个。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;X11R6&#x2F;lib</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib</span><br><span class="line">&#x2F;opt&#x2F;lib</span><br></pre></td></tr></table></figure><p>也可以建一个 <code>/etc/ld.so.conf.d 目录</code>，再在这个目录下建 <code>\*.config 文件</code>并添加路径，然后在 <code>/etc/ld.so.conf 目录</code>中添加这一行： <code>include /etc/ld.so.conf.d/\*.config</code> （这样条理会清楚一点）</p><p>需要注意的是：第二种搜索路径的设置方式对于程序链接时的库（包括共享库和静态库）的定位已经足够了。但是对于使用了共享库的程序的执行还是不够的，这是因为为了加快程序执行时对共享库的定位速度，避免使用搜索路径查找共享库的低效率，所以是直接读取库列表文件 <code>/etc/ld.so.cache</code> 的方式从中进行搜索。<code>/etc/ld.so.cache</code> 是一个非文本的数据文件，不能直接编辑，它是根据 <code>/etc/ld.so.conf</code> 中设置的搜索路径由 <code>/sbin/ldconfig</code> 命令将这些搜索路径下的共享库文件集中在一起而生成的（ldconfig 命令要以 root 权限执行）。因此为了保证程序执行时对库的定位，在 <code>/etc/ld.so.conf</code> 中进行了库搜索路径的设置之后，还必须要运行 <code>/sbin/ldconfig</code> 命令更新 <code>/etc/ld.so.cache</code> 文件之后才可以。</p><p><strong>ldconfig</strong>，简单的说，它的作用就是将 <code>/etc/ld.so.conf</code> 列出的路径下的库文件缓存到 <code>/etc/ld.so.cache</code> 以供使用。因此当安装完一些库文件（例如刚安装好 glib），或者修改 <code>ld.so.conf</code> 增加新的库路径之后，需要运行一下 <code>/sbin/ldconfig</code> 使所有的库文件都被缓存到 <code>ld.so.cache</code> 中。如果没有这样做，即使库文件明明就在 <code>/usr/lib</code> 下的，也是不会被使用的，结果在编译过程中报错。</p><h1 id="3-pc-文件书写规范"><a href="#3-pc-文件书写规范" class="headerlink" title="3. pc 文件书写规范"></a>3. pc 文件书写规范</h1><p>这里我们首先来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Package Information for pkg-config</span><br><span class="line"></span><br><span class="line">prefix&#x3D;&#x2F;usr&#x2F;local</span><br><span class="line">exec_prefix&#x3D;$&#123;prefix&#125;</span><br><span class="line">libdir&#x3D;$&#123;exec_prefix&#125;&#x2F;lib</span><br><span class="line">includedir&#x3D;$&#123;prefix&#125;&#x2F;include&#x2F;opencv4</span><br><span class="line"></span><br><span class="line">Name: OpenCV</span><br><span class="line">Description: Open Source Computer Vision Library</span><br><span class="line">Version: 4.5.2</span><br><span class="line">Libs: -L$&#123;exec_prefix&#125;&#x2F;lib -lopencv_stitching -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_face -lopencv_fuzzy -lopencv_hdf -lopencv_hfs -lopencv_img_hash -lopencv_intensity_transform -lopencv_line_descriptor -lopencv_mcc -lopencv_quality -lopencv_rapid -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_highgui -lopencv_datasets -lopencv_text -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_wechat_qrcode -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_dnn -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core</span><br><span class="line">Libs.private: -ldl -lm -lpthread -lrt</span><br><span class="line">Cflags: -I$&#123;includedir&#125;</span><br></pre></td></tr></table></figure><p>这是 opencv4.5 库的一个真实的例子。下面我们简单描述一下.pc文件中的用到的一些关键词：</p><ul><li>Name: 一个针对library或package的便于人阅读的名称。这个名称可以是任意的，它并不会影响到pkg-config的使用，pkg-config是采用pc文件名的方式来工作的。</li><li>Description: 对package的简短描述</li><li>URL: 人们可以通过该URL地址来获取package的更多信息或者package的下载地址</li><li>Version: 指定package版本号的字符串</li><li>Requires: 本库所依赖的其他库文件。所依赖的库文件的版本号可以通过使用如下比较操作符指定：=,&lt;,&gt;,&lt;=,&gt;=</li><li>Requires.private: 本库所依赖的一些私有库文件，但是这些私有库文件并不需要暴露给应用程序。这些私有库文件的版本指定方式与Requires中描述的类似。</li><li>Conflicts: 是一个可选字段，其主要用于描述与本package所冲突的其他package。版本号的描述也与Requires中的描述类似。本字段也可以取值为同一个package的多个不同版本实例。例如: Conflicts: bar &lt; 1.2.3, bar &gt;= 1.3.0</li><li>Cflags: 编译器编译本package时所指定的编译选项，和其他并不支持pkg-config的library的一些编译选项值。假如所需要的library支持pkg-config,则它们应该被添加到Requires或者Requires.private中</li><li>Libs: 链接本库时所需要的一些链接选项，和其他一些并不支持pkg-config的library的链接选项值。与Cflags类似</li><li>Libs.private: 本库所需要的一些私有库的链接选项。</li></ul><h1 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. 示例</h1><p>我们给出一个用 <strong>pkg-config</strong> 工具协助编译的程序例子（rgb24_jpg.c）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;jpeglib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JPEG_QUALITY 100 <span class="comment">//图片质量</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">save_rgb_to_jpg</span><span class="params">(<span class="keyword">char</span> *soureceData, <span class="keyword">int</span> imgWidth, <span class="keyword">int</span> imgHeight, <span class="keyword">char</span> * fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">3</span>;<span class="comment">//1 for gray, 3 for color</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">jpeg_compress_struct</span> <span class="title">cinfo</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">jpeg_error_mgr</span> <span class="title">jerr</span>;</span></span><br><span class="line">    FILE *outfile;                 </span><br><span class="line">    JSAMPROW row_pointer[<span class="number">1</span>];        <span class="comment">// pointer to JSAMPLE row[s] </span></span><br><span class="line">    <span class="keyword">int</span> row_stride = imgWidth;      <span class="comment">// physical row width in image buffer </span></span><br><span class="line"> </span><br><span class="line">    cinfo.err = jpeg_std_error(&amp;jerr);</span><br><span class="line">    jpeg_create_compress(&amp;cinfo);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((outfile = fopen(fileName, <span class="string">&quot;wb&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;can&#x27;t open %s\n&quot;</span>, fileName);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    jpeg_stdio_dest(&amp;cinfo, outfile);</span><br><span class="line"> </span><br><span class="line">    cinfo.image_width = imgWidth;      <span class="comment">// image width and height, in pixels </span></span><br><span class="line">    cinfo.image_height = imgHeight;</span><br><span class="line">    cinfo.input_components = depth;    <span class="comment">// of color components per pixel </span></span><br><span class="line">    cinfo.in_color_space = JCS_RGB;    <span class="comment">//or JCS_GRAYSCALE;   colorspace of input image </span></span><br><span class="line"> </span><br><span class="line">    jpeg_set_defaults(&amp;cinfo);</span><br><span class="line">    jpeg_set_quality(&amp;cinfo, JPEG_QUALITY, TRUE ); <span class="comment">/* limit to baseline-JPEG values */</span></span><br><span class="line"></span><br><span class="line">    jpeg_start_compress(&amp;cinfo, TRUE);</span><br><span class="line"> </span><br><span class="line">    row_stride = imgWidth; <span class="comment">/* JSAMPLEs per row in image_buffer */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (cinfo.next_scanline &lt; cinfo.image_height) </span><br><span class="line">    &#123;   </span><br><span class="line">        row_pointer[<span class="number">0</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)&amp; soureceData[cinfo.next_scanline * row_stride*depth];</span><br><span class="line">        (<span class="keyword">void</span>) jpeg_write_scanlines(&amp;cinfo, row_pointer, <span class="number">1</span>); </span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    jpeg_finish_compress(&amp;cinfo);</span><br><span class="line">    jpeg_destroy_compress(&amp;cinfo);  </span><br><span class="line">    fclose(outfile);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">5</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s rgbpic imgWidth imgHeight jpgpic\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">int</span> imgWidth = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">int</span> imgHeight = atoi(argv[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[imgHeight * imgWidth * depth];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">    read(fd, buf, <span class="keyword">sizeof</span> buf);</span><br><span class="line">    save_rgb_to_jpg(buf, atoi(argv[<span class="number">2</span>]), atoi(argv[<span class="number">3</span>]), argv[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>执行如下命令编译程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc rgb24_jpg.c -o rgb24_jpg `pkg-config --cflags --libs opencv4`</span><br></pre></td></tr></table></figure><p>就可以看到程序编译好了</p><h1 id="5-Linux下链接库的路径顺序"><a href="#5-Linux下链接库的路径顺序" class="headerlink" title="5. Linux下链接库的路径顺序"></a>5. Linux下链接库的路径顺序</h1><h2 id="5-1-运行时链接库的搜索顺序"><a href="#5-1-运行时链接库的搜索顺序" class="headerlink" title="5.1 运行时链接库的搜索顺序"></a>5.1 运行时链接库的搜索顺序</h2><p>Linux程序在运行时对动态链接库的搜索顺序如下：</p><p>1） 在编译目标代码时所传递的动态库搜索路径（注意，这里指的是通过 <code>-Wl,rpath=&lt;path1&gt;:&lt;path2&gt;</code> 或 <code>-R</code> 选项传递的运行时动态库搜索路径，而不是通过 <code>-L</code> 选项传递的）</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -Wl,-rpath,/home/arc/<span class="built_in">test</span>,-rpath,/lib/,-rpath,/usr/lib/,-rpath,/usr/<span class="built_in">local</span>/lib test.c</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">$ gcc -Wl,-rpath=/home/arc/<span class="built_in">test</span>:/lib/:/usr/lib/:/usr/<span class="built_in">local</span>/lib test.c</span><br></pre></td></tr></table></figure><p>2） 环境变量 <strong>LD_LIBRARY_PATH</strong> 指定的动态库搜索路径</p><p>3） 配置文件 <em>/etc/ld.so.conf</em> 中所指定的动态库搜索路径（更改 <em>/etc/ld.so.conf</em> 之后，一定要执行命令 ldconfig，该命令会将 <em>/etc/ld.so.conf</em> 文件中所有路径下的库载入内存）</p><p>4） 默认的动态库搜索路径 <em>/lib</em></p><p>5） 默认的动态库搜索路径 <em>/usr/lib</em></p><h2 id="5-2-编译时与运行时动态库查找的比较"><a href="#5-2-编译时与运行时动态库查找的比较" class="headerlink" title="5.2 编译时与运行时动态库查找的比较"></a>5.2 编译时与运行时动态库查找的比较</h2><p>下面是对编译时库的查找与运行时库的查找做一个简单的比较：</p><p>1） 编译时查找的是静态库或动态库， 而运行时，查找的是动态库</p><p>2） 编译时可以用 <code>-L</code> 指定查找路径，或者用环境变量 <strong>LIBRARY_PATH</strong>， 而运行时可以用 <code>-Wl,rpath</code> 或者 <code>-R</code> 选项，或者修改 <em>/etc/ld.so.conf</em>，或者设置环境变量 <strong>LD_LIBRARY_PATH</strong></p><p>3） 编译时用的链接器是 ld，而运行时用的链接器是 /lib/ld-linux.so.2</p><p>4） 编译时与运行时都会查找默认路径 <em>/lib</em>、*/usr/lib*</p><p>5） 编译时还有一个默认路径 <em>/usr/local/lib</em>，而运行时不会默认查找该路径</p><h2 id="5-3-补充-gcc使用-Wl-rpath"><a href="#5-3-补充-gcc使用-Wl-rpath" class="headerlink" title="5.3 补充:gcc使用-Wl,-rpath"></a>5.3 补充:gcc使用-Wl,-rpath</h2><p>1） <strong>-Wl,-rpath</strong></p><p>加上 <code>-Wl,-rpath</code> 选项的作用就是指定程序运行时的库搜索目录，是一个链接选项，生效于设置的环境变量之前(LD_LIBRARY_PATH)。下面我们通过一个例子来说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.h</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;add.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;add.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 + 2 = %d\n&quot;</span>, add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add.h 和 add.c 用于生成一个 so 库，实现了一个简单的加法，main.c 中引用共享库计算 1 + 2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译共享库</span></span><br><span class="line">$ gcc add.c -fPIC -shared -o libadd.so</span><br><span class="line"><span class="comment"># 编译主程序</span></span><br><span class="line">$ gcc main.o -L. -ladd -o app</span><br></pre></td></tr></table></figure><p>编译好后运行依赖库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ldd app</span><br><span class="line">    linux-vdso.so.1 (0x00007ffeb23ab000)</span><br><span class="line">    libadd.so =&gt; not found</span><br><span class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007febb7dd0000)</span><br><span class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007febb83d0000</span><br><span class="line"></span><br><span class="line">$ ./app</span><br><span class="line">    ./app: error <span class="keyword">while</span> loading shared libraries: libadd.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>可以看到， libadd.so 这个库没有找到，程序也无法运行，要运行它必须要把当前目录添加到环境变量或者搜索路径中去。但是如果在链接时加上 <code>-Wl,rpath</code> 选项之后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -c -o main.o main.c</span><br><span class="line">$ gcc -Wl,-rpath=`<span class="built_in">pwd</span>` main.o -L. -ladd -o app</span><br><span class="line">$ ldd app</span><br><span class="line">linux-vdso.so.1 (0x00007fff8f4e3000)</span><br><span class="line">libadd.so =&gt; /data/code/c/1-sys/solib/libadd.so (0x00007faef8428000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007faef8030000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007faef8838000)</span><br><span class="line">$ ./app</span><br><span class="line">1 + 2 = 3</span><br></pre></td></tr></table></figure><p>依赖库的查找路径就找到了，程序能正常运行。</p><p>下面我们再来看一下生成的可执行文件app，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -d app</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0xe08 contains 26 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x0000000000000001 (NEEDED)             Shared library: [libadd.so]</span><br><span class="line"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class="line"> 0x000000000000000f (RPATH)              Library rpath: [/root/<span class="built_in">test</span>]</span><br><span class="line"> 0x000000000000000c (INIT)               0x400578</span><br><span class="line"> 0x000000000000000d (FINI)               0x400784</span><br><span class="line"> 0x0000000000000019 (INIT_ARRAY)         0x600df0</span><br><span class="line"> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000000000001a (FINI_ARRAY)         0x600df8</span><br><span class="line"> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000006ffffef5 (GNU_HASH)           0x400298</span><br><span class="line"> 0x0000000000000005 (STRTAB)             0x400408</span><br><span class="line"> 0x0000000000000006 (SYMTAB)             0x4002d0</span><br><span class="line"> 0x000000000000000a (STRSZ)              189 (bytes)</span><br><span class="line"> 0x000000000000000b (SYMENT)             24 (bytes)</span><br><span class="line"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class="line"> 0x0000000000000003 (PLTGOT)             0x601000</span><br><span class="line"> 0x0000000000000002 (PLTRELSZ)           96 (bytes)</span><br><span class="line"> 0x0000000000000014 (PLTREL)             RELA</span><br><span class="line"> 0x0000000000000017 (JMPREL)             0x400518</span><br><span class="line"> 0x0000000000000007 (RELA)               0x400500</span><br><span class="line"> 0x0000000000000008 (RELASZ)             24 (bytes)</span><br><span class="line"> 0x0000000000000009 (RELAENT)            24 (bytes)</span><br><span class="line"> 0x000000006ffffffe (VERNEED)            0x4004e0</span><br><span class="line"> 0x000000006fffffff (VERNEEDNUM)         1</span><br><span class="line"> 0x000000006ffffff0 (VERSYM)             0x4004c6</span><br><span class="line"> 0x0000000000000000 (NULL)               0x0</span><br></pre></td></tr></table></figure><p>可以看到是在编译后的程序中包含了库的搜索路径。</p><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ol><li><a href="https://www.freedesktop.org/wiki/Software/pkg-config/">pkg-config官网</a></li><li><a href="http://man.linuxde.net/ldconfig">ldconfig命令</a></li><li><a href="https://www.dyxmq.cn/linux/gcc-option-wl-rpath.html">gcc使用-Wl,-rpath解决so库版本冲突</a></li><li><a href="Linux%E4%B8%ADpkg-config%E7%9A%84%E4%BD%BF%E7%94%A8">Linux中pkg-config的使用</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pkg-config&quot;&gt;&lt;a href=&quot;#pkg-config&quot; class=&quot;headerlink&quot; title=&quot;pkg-config&quot;&gt;&lt;/a&gt;pkg-config&lt;/h1&gt;&lt;p&gt;这个小工具一般来说需要自己下载，执行 &lt;code&gt;sudo apt inst</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CMake Template</title>
    <link href="https://codroc.github.io/2021/03/10/cmake_template/"/>
    <id>https://codroc.github.io/2021/03/10/cmake_template/</id>
    <published>2021-03-10T12:07:43.287Z</published>
    <updated>2021-03-10T12:07:43.287Z</updated>
    
    <content type="html"><![CDATA[<p>常用 <strong>CMake</strong> 模板，边学边更新</p><span id="more"></span><!-- vim-markdown-toc GitLab --><ul><li><a href="#%E7%8E%AF%E5%A2%83">环境</a></li><li><a href="#%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">简单介绍</a></li><li><a href="#%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8E%E5%A4%B4%E6%96%87%E4%BB%B6%E9%83%BD%E5%9C%A8%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B">源文件与头文件都在根目录下</a><ul><li><a href="#%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F">内置变量</a></li></ul></li><li><a href="#%E6%BA%90%E6%96%87%E4%BB%B6%E5%92%8C%E5%A4%B4%E6%96%87%E4%BB%B6%E5%88%86%E5%BC%80%E5%AD%98%E6%94%BE">源文件和头文件分开存放</a></li><li><a href="#%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E5%BA%93%E6%88%96%E5%85%B1%E4%BA%AB%E5%BA%93%E6%96%87%E4%BB%B6">生成静态库或共享库文件</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- vim-markdown-toc --><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>我个人使用的是 <strong>Ubuntu18.04</strong>，可以通过 <code>sudo apt install cmake</code> 来安装 <strong>CMake</strong>，在终端输入 <code>cmake --version</code> 可查看版本。</p><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p><strong>CMake</strong> 是个一个开源的跨平台自动化建构系统，用来管理软件建置的程序，并不依赖于某特定编译器，并可支持多层目录、多个应用程序与多个库。 它用配置文件控制建构过程 <em>（build process）</em> 的方式和 <strong>Unix 的 make</strong> 相似，只是 <strong>CMake</strong> 的配置文件取名为 <strong>CMakeLists.txt</strong>。<strong>CMake</strong> 并不直接建构出最终的软件，而是产生标准的建构档（如 <strong>Unix的Makefile</strong> 或 <strong>Windows Visual C++的projects/workspaces</strong>），然后再依一般的建构方式使用。</p><p>上面这句话摘自 <a href="https://zh.wikipedia.org/wiki/CMake">Wiki</a>，它说的是什么意思？如果你跟我一样在 <strong>linux</strong> 环境下工作，那么你一定听过 <strong>make</strong>，<strong>make</strong> 能够根据 <strong>makefile</strong> 文件中的说明来一步步地自动构建目标文件；<strong>make</strong> 是一种工具（可执行程序），<strong>makefile</strong> 是文件，里面说明了如何去构建目标文件，<strong>make</strong> 程序会从 <strong>makefile</strong> 中一条条地读出相关的指令去执行。那么 <strong>CMake</strong> 和 <strong>makefile</strong> 有什么关系呢？在没有 <strong>CMake</strong> 之前，我们需要自己动手写 <strong>makefile</strong>，然后去运行 <strong>make</strong>，而这需要你去学习 <strong>makefile</strong> 的语法，十分费时费精力；而现在有了 <strong>CMake</strong>，它可以根据你的指示(都写在 <strong>CMakeLists.txt</strong> 中)自动地去生成 <strong>makefile</strong>，然后你再用 <strong>make</strong> 去构建目标文件即可。写 <strong>CMakeLists.txt</strong> 比写 <strong>makefile</strong> 可容易太多了！</p><h1 id="源文件与头文件都在根目录下"><a href="#源文件与头文件都在根目录下" class="headerlink" title="源文件与头文件都在根目录下"></a>源文件与头文件都在根目录下</h1><p>这种是最简单的情况，例如我的目录下有这些文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── hello.c</span><br><span class="line">├── main.c</span><br><span class="line">├── hello.h</span><br><span class="line">└── CMakeLists.txt</span><br></pre></td></tr></table></figure><p>如果在 g++ 中执行时命令是这样的：<code>g++ hello.c main.c -o main</code><br>那么我可以在当前目录下编写 <strong>CMakeLists.txt</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line"></span><br><span class="line">project(main VERSION 1.0)</span><br><span class="line"></span><br><span class="line">add_executable(main hello.c main.c)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>cmake_minimum_required(VERSION)</code> 用来表示可接受的 <strong>CMake</strong> 最低版本</li><li><code>project(name)</code> 用来定义项目名称</li><li><code>add_executable(name sources)</code> 第一个参数是项目名称，第二个参数是源文件名(多个文件名之间用空格隔开)</li></ul><p>编写完 <strong>CMakeLists.txt</strong> 文件后，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ../</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>可以看到目标文件已经构建完成！现在的目录层级是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│   ├── main</span><br><span class="line">│   └── makefile ...</span><br><span class="line">├── hello.c</span><br><span class="line">├── main.c</span><br><span class="line">├── hello.h</span><br><span class="line">└── CMakeLists.txt</span><br></pre></td></tr></table></figure><p>这里创建 build 目录是为了更好的层次化管理文件，build 目录内放置所有的二进制文件，而源文件和头文件一般都在项目根目录下</p><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><p><strong>CMake</strong> 定义了相当丰富的变量，然而，我常用的也就那几个。</p><table><thead><tr><th align="left">name</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">PROJECT_BINARY_DIR</td><td align="left">是指包含最近的 project() 命令的 build 目录</td></tr><tr><td align="left">PROJECT_SOURCE_DIR</td><td align="left">是指包含最近的 project() 命令的 CMakeLists.txt 的目录</td></tr><tr><td align="left">CMAKE_CURRENT_BINARY_DIR</td><td align="left">当前处理的 CMakeLists.txt 所在的 build 目录</td></tr><tr><td align="left">CMAKE_CURRENT_SOURCE_DIR</td><td align="left">当前处理的 CMakeLists.txt 所在的目录</td></tr><tr><td align="left">CMAKE_SOURCE_DIC</td><td align="left">指定义了顶级 CMakeLists.txt 的目录</td></tr><tr><td align="left">EXECUTABLE_OUTPUT_PATH</td><td align="left">生成的可执行文件的存储目录</td></tr><tr><td align="left">LIBRARY_OUTPUT_PATH</td><td align="left">生成的库的存储目录</td></tr><tr><td align="left">PROJECT_NAME</td><td align="left">项目名称</td></tr><tr><td align="left">PROJECT_VERSION_MAJOR</td><td align="left">项目主版本号（例如 2.8 的主版本号是 2）</td></tr><tr><td align="left">PROJECT_VERSION_MINOR</td><td align="left">项目次版本号 （例如 2.8 的次版本号是 8）</td></tr><tr><td align="left">PROJECT_VERSION_PATCH</td><td align="left">项目版本的补丁号（例如 2.8.1 的补丁号是 1）</td></tr><tr><td align="left">BUILD_SHARED_LIBS</td><td align="left">用于控制 cmake 的 add_library 指令是否默认生成 动态so（yes if flag=on）还是 静态库.a （if flag=off）。默认是 flag=on</td></tr><tr><td align="left">CMAKE_C_FLAGS</td><td align="left">编译器 gcc 的标志</td></tr><tr><td align="left">CMAKE_CXX_FLAGS</td><td align="left">编译器 g++ 的标志</td></tr></tbody></table><p>记不住变量的值时，可以使用 cmake 的 <strong>message 函数</strong>输出变量值。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(show_vars VERSION <span class="number">1.0</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了分行确定输出内容</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;1.PROJECT_BINARY_DIR = $&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;2.PROJECT_SOURCE _DIR = $&#123;_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;3.CMAKE_CURRRENT_BINARY_DIR = $&#123;CMAKE_CURRRENT_BINARY_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;4.CMAKE_CURRENT_SOURCE_DIR = $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;5.CMAKE_SOURCE_DIR = $&#123;CMAKE_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;6.EXECUTABLE_OUTPUT_PATH = $&#123;EXECUTABLE_OUTPUT_PATH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;7.LIBRARY_OUTPUT_PATH = $&#123;LIBRARY_OUTPUT_PATH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;8.PROJECT_NAME = $&#123;PROJECT_NAME&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;9.PROJECT_VERSION_MAJOR = $&#123;PROJECT_VERSION_MAJOR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;10.PROJECT_VERSION_MINOR = $&#123;PROJECT_VERSION_MINOR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;11.PROJECT_VERSION_PATCH = $&#123;PROJECT_VERSION_PATCH&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;12.BUILD_SHARED_LIBS = $&#123;BUILD_SHARED_LIBS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;13.CMAKE_C_FLAGS = $&#123;CMAKE_C_FLAGS&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;14.CMAKE_CXX_FLAGS = $&#123;CMAKE_CXX_FLAGS&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="源文件和头文件分开存放"><a href="#源文件和头文件分开存放" class="headerlink" title="源文件和头文件分开存放"></a>源文件和头文件分开存放</h1><p>现在有以下目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── hello.h</span><br><span class="line">└── source</span><br><span class="line">    ├── hello.cc</span><br><span class="line">    └── main.cc</span><br></pre></td></tr></table></figure><p>这种情况下的 CMakeLists.txt 文件应该这样编写：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(main)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES</span><br><span class="line">    <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/source/*.cc</span><br><span class="line">)</span><br><span class="line"><span class="keyword">add_executable</span>(main SOURCES)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(main PRIVATE <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><p><strong>set(name value)</strong> 可以自己定义一个变量，<em>name</em> 是变量名，<em>value</em> 是变量值</p><p>这里 <em>PROJECT_SOURCE_DIR</em> 的值就是 <em>./</em> (项目根目录)</p><p><strong>target_include_directories(<target> &lt;PRIVATE|INTERFACE|PUBLIC&gt; [item])</strong> 是用来标明头文件路径的，相当于编译器选项的 <strong>-I</strong>, 这里 <em>target</em> 就是项目名称，<em>&lt;PRIVATE|INTERFACE|PUBLIC&gt;</em> 三种属性我现在还没搞懂。。。*[item]* 就是头文件路径。</p><p>你可以在 make 时开启输出模式 <code>make VERBOSE=1</code> 来看看编译器的参数，应该是:<br><code>g++ -I 根目录/include 根目录/hello.cc 根目录/main.cc -o 根目录/build/main </code></p><h1 id="生成静态库或共享库文件"><a href="#生成静态库或共享库文件" class="headerlink" title="生成静态库或共享库文件"></a>生成静态库或共享库文件</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://mlog.club/article/1918025">https://mlog.club/article/1918025</a><br>2. <a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html#packaging-debug-and-release-step-12">https://cmake.org/cmake/help/latest/guide/tutorial/index.html#packaging-debug-and-release-step-12</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;常用 &lt;strong&gt;CMake&lt;/strong&gt; 模板，边学边更新&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ Type Casting</title>
    <link href="https://codroc.github.io/2021/03/09/typecasting/"/>
    <id>https://codroc.github.io/2021/03/09/typecasting/</id>
    <published>2021-03-08T16:00:00.000Z</published>
    <updated>2021-03-09T07:42:13.757Z</updated>
    
    <content type="html"><![CDATA[<p>一直搞不清楚 <strong>static_cast, dynamic_cast, reinterpret_cast, const_cast</strong> 的作用以及区别，花个时间学习并记录一下！</p><span id="more"></span><!-- vim-markdown-toc GFM --><ul><li><a href="#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">隐式类型转换</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2">类的隐式转换</a></li><li><a href="#%E5%9B%9B%E7%A7%8D-casting">四种 casting</a><ul><li><a href="#dynamic_cast">dynamic_cast</a></li><li><a href="#static_cast">static_cast</a></li><li><a href="#reinterpret_cast">reinterpret_cast</a></li><li><a href="#const_cast">const_cast</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- vim-markdown-toc --><h1 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h1><p>当一个值拷贝到与其类型相兼容的类型时，隐式类型转换会自动执行，这个在 POD(Plain Old Data) 或基础数据类型中经常看到，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><p>这里，short 类型的对象 a，首先隐式转换成 int 类型，然后直接赋值给了 int 类型的对象 b。这是我们所熟知的标准类型转换。标准类型转换作用于基础数据类型，并且允许数值类型 (short to int, int to float, double to int …) 到 bool 类型或 bool 类型到数值类型的转换，当然还有一些指针类型的转换，这些都是标准类型转换。</p><p>从一些较小的 integer 类型转换到 int 类型的时候，或是从 float 类型转换到 double 类型的时候，是保证不会丢失精度的，保证值是不会变的，可以把这种转换称之为“提升”(promoted)。其他数值类型之间的转换并不能保证值不变：</p><ul><li>integer 类型转换到 unsigned integer 类型，最高位的 1 的语义将会发送改变，从原来表示符号变成表示数值。（即：原来的 -1 如今变成了最大的值，-2 变成第二大的值 …）</li><li><strong>bool</strong> 类型的 <strong>false</strong> 相当于数值类型的 <strong>0</strong> 以及指针类型的 <strong>nullptr</strong>；然而 <strong>bool</strong> 类型的 <strong>false</strong> 相当于数值类型除 0 以外的所有值，如果把 <strong>false</strong> 转成数值类型的话，那将会是 1。</li><li>如果转换发生在浮点类型到整数类型上，那么结果将会被截断，如果结果超过了整数类型所能表示的范围，那么这个转换将会导致未定义的行为。</li><li>如果转换发生在相似类型之间（integer to integer, floating to floating）那么这个转换是有效的，但是具体的值视情况而定（并且这种转换可能是不可移植的 non-portable）</li></ul><p>上述的这些隐式转换中，有一些是会损失精度的，那些会损失精度的转换会有编译器给出警告，你可以通过显示转换来消除警告。</p><p>对于非基础数据类型而言，数组和函数能够隐式转换为指针，并且指针通常允许以下几种转换：</p><ul><li>空指针（nullptr）可以转换到指向任意类型的指针</li><li>指向任意类型的指针能够转换到指向 void 的指针</li><li><em>Pointer upcast</em>: 指向派生类的指针能够在不改变 <strong>const</strong> 或 <strong>volatile</strong> 约束条件的情况下转换成指向其基类的指针。</li></ul><h1 id="类的隐式转换"><a href="#类的隐式转换" class="headerlink" title="类的隐式转换"></a>类的隐式转换</h1><p>对于类来说，可以通过以下三种成员函数来控制隐式类型转换：</p><ul><li><strong>Single-argument Constructor</strong>: 允许从特定类型隐式转换来初始化对象。</li><li><strong>Assignment operator</strong>: 允许从特定类型隐式转换给对象赋值。</li><li><strong>type-cast operator</strong>: 允许隐式转换到一个特定类型。</li></ul><p>举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implicit conversion of classes:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// conversion from A (constructor):</span></span><br><span class="line">  B (<span class="keyword">const</span> A&amp; x) &#123;&#125;</span><br><span class="line">  <span class="comment">// conversion from A (assignment):</span></span><br><span class="line">  B&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> A&amp; x) &#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">  <span class="comment">// conversion to A (type-cast operator)</span></span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">A</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> A();&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  A foo;</span><br><span class="line">  B bar = foo;    <span class="comment">// calls constructor</span></span><br><span class="line">  bar = foo;      <span class="comment">// calls assignment</span></span><br><span class="line">  foo = bar;      <span class="comment">// calls type-cast operator</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>type-cast operator</strong> 使用特殊的语法，它使用 <strong>operator</strong> 作为关键字，在其后跟转换后的类型以及一对空括号。返回值类型就是转换后的类型，所以就没必要在 <strong>operator</strong> 前加上返回值类型了。</p><h1 id="四种-casting"><a href="#四种-casting" class="headerlink" title="四种 casting"></a>四种 casting</h1><p>C++ 是一门强类型语言。许多转换都需要显式的说明，特别是那写具有不同值语义的转换。下面就有个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10.3</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = <span class="keyword">int</span> (x); <span class="comment">//functional notation</span></span><br><span class="line">y = (<span class="keyword">int</span>) x; <span class="comment">// c-like cast notation</span></span><br></pre></td></tr></table></figure><p>对于基础数据类型而言，以上两种同用的显式转换方式已经够用了。然而，如果对类，类指针不加区分地使用上述地方式会导致程序的运行时错误（即使编译是能通过的）。举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class type-casting</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> i,j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Addition</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Addition (<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; x=a; y=b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">result</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x+y;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  Dummy d;</span><br><span class="line">  Addition * padd;</span><br><span class="line">  padd = (Addition*) &amp;d;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; padd-&gt;result();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译能通过，但是会产生运行时错误。程序声明了一个类 <strong>Dummy</strong> 的对象 <strong>d</strong> 和指向 <strong>Addition</strong> 的指针 <strong>padd</strong>，然后把 <strong>d</strong> 的地址经过显式强制类型转换到指向 <strong>Addition</strong> 的指针再赋值给 <strong>padd</strong>，随后调用了类 <strong>Addition</strong> 的方法。</p><p>在 C++ 的显示强制类型转换可以在任意两种类型之间进行，这就回来带巨大的隐患，想一想，一种类型被显式地强制类型转换到另一种完全不相关的类型，然后在调用该类型的操作会导致什么情况，毫无疑问会产生运行时错误，轻则 core dump，重则程序不声不响的继续给你允许下去，你完全不知道哪里出问题了，然后用了很长事件来找错，浪费时间浪费精力，哎~~~</p><p>不受限制的显式类型转换允许指针的类型转换到指向其他的任意类型，甚至是于其原本毫不相关的类型。</p><p>为了控制这些在类型间的转换，C++ 就引入了四种转换操作符：<strong>dynamic_cast</strong>，<strong>reinterpret_cast</strong>，<strong>static_cast</strong>，<strong>const_cast</strong>。它们具有相同的使用格式，&lt;&gt; 内是要转换的类型，() 内是将要被转换的表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic_cast</span> &lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">reinterpret_cast</span> &lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">static_cast</span> &lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">const_cast</span> &lt;new_type&gt; (expression)</span><br></pre></td></tr></table></figure><h2 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2><p><strong>dynamic_cast</strong> 能够作用在指向类对象的指针或引用上（或作用在 void*)。它保证了类型转换后的结果指针（引用）一定指向有效的完整的类对象。</p><p>它不仅能把指向类对象的指针 <em>upcast</em> (converting from pointer-to-derived to pointer-to-base) ，还能 <em>downcast</em> (convert from pointer-to-base to pointer-to-derived) 到指向多态类对象（带有虚成员函数的类），但是这个类对象必须是有效且完整的。举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dynamic_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123; <span class="keyword">int</span> a; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Base * pba = <span class="keyword">new</span> Derived;</span><br><span class="line">    Base * pbb = <span class="keyword">new</span> Base;</span><br><span class="line">    Derived * pd;</span><br><span class="line"></span><br><span class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pba);</span><br><span class="line">    <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Null pointer on first type-cast.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pbb);</span><br><span class="line">    <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Null pointer on second type-cast.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (exception&amp; e) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Exception: &quot;</span> &lt;&lt; e.what();&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码跑起来后会输出以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Null pointer on second type-cast.</span><br></pre></td></tr></table></figure><p>上面的代码尝试执行从指向 <strong>Base</strong> 类型的指针对象 ( pba 和 pbb ) 到指向 <strong>Derived</strong>类型的指针对象的两次动态强制转换，但只有第一次成功。注意它们各自的初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base * pba = <span class="keyword">new</span> Derived;</span><br><span class="line">Base * pbb = <span class="keyword">new</span> Base;</span><br></pre></td></tr></table></figure><p>尽管两者都是指向 <strong>Base</strong> 类型的指针，但 pba 实际上指向的是 <strong>Derived</strong> 类型的对象，而 pbb 指向的是 <strong>Base</strong> 类型的对象。因此，当使用动态强制转换执行它们各自的类型转换时，pba 指向的是 <strong>class Derived</strong> 的完整对象，而 pbb 指向的是 <strong>class Base</strong> 的对象，这是 <strong>class Derived</strong> 的不完整对象。</p><p>当 <strong>dynamic_cast</strong> 转换由于不满足目标类是有效且完整这个条件的时候，它会返回 <em>null</em> 指针来表示转换失败了，如果 <strong>dynamic_cast</strong> 用来转换引用类型并且失败了，它会抛出一个 <strong>bad_cast</strong> 的异常。</p><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h2><p><strong>static_cast</strong> 也能完成 <em>upcast</em> 和 <em>downcast</em>，和 <strong>dynamic_cast</strong> 的唯一区别就在于，它不会帮你检查转换后的类型是否是有效且完整的，这个检查得你自己来做，这么做有好处也有坏处。好处在于降低了运行时开销，坏处是需要程序员对自己的代码十分了解。</p><p><strong>dynamic_cast</strong> 能做的 <strong>static_cast</strong> 都能做，初次之外，它还能对以下几种情况进行转换：</p><ul><li>显式调用单参数构造函数（Single-argument constructor）或转换操作符（type-cast operator）。</li><li>转换到右值引用</li><li>把 <strong>enum class</strong> 转换成整数类型或浮点类型</li><li>把任意类型转换到 <strong>void</strong> 类型</li></ul><p>注意：<strong>static_cast</strong> 不能转换掉 <strong>expression</strong> 的 <strong>const、volatile、或者 __unaligned</strong> 属性。<br><strong>C++ primer第五章</strong> 里写了编译器隐式执行任何类型转换都可由 <strong>static_cast</strong> 显示完成</p><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h2><p><strong>reinterpret_cast</strong> 能够将任意指针类型转换为任意其他指针类型，即使是不相关的类。它的操作结果是简单的二进制位的拷贝和赋值，什么意思呢？看看下面的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">&quot;This is an example.&quot;</span>;</span><br><span class="line">i = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>&gt;(p);</span><br></pre></td></tr></table></figure><p>这里 <strong>i</strong> 是 <em>int</em> 类型的，<strong>p</strong> 是指向 <em>char</em> 类型的指针对象，这是两个完全不相关的类型，<code>i = reinterpret_cast&lt;int&gt;(p)</code> 操作就是简单把对象 <em>p</em> 的地址处的二进制值原封不动地存放到对象 <em>i</em> 的地址处。所以你可以打印出 <em>p</em> 和 <em>i</em> 地址处存放的值，可以看到是完全一样的。由于 <em>int</em> 类型为 4 个字节，<em>char</em> 类型为 1 个字节，所以<strong>转换前后没有数位损失</strong>。</p><h2 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h2><p><strong>const_cast</strong> 一般用于强制消除对象的常量性。它是唯一能做到这一点的 C++ 风格的强制转型。这个转换能剥离一个对象的 <strong>const属性</strong>，也就是说允许你对常量进行修改:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">char</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">&quot;sample text&quot;</span>;</span><br><span class="line">  print ( <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt; (c) );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>print</strong> 函数只接受 <strong>non-const</strong> 数据，那你就可以用 <strong>const_cast</strong> 去除对象 <strong>c</strong> 的 <strong>const</strong> 属性。</p><p>上面的例子保证可以工作，因为函数 <strong>print</strong> 不会往指向的对象写数据。但是请注意：移除指向对象的常量后，实际向它写入数据会导致未定义的行为。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">http://www.cplusplus.com/doc/tutorial/typecasting/</a></li><li><a href="https://www.cnblogs.com/heyonggang/p/3361643.html">https://www.cnblogs.com/heyonggang/p/3361643.html</a></li><li>《C++ Primer 第 5 版》</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直搞不清楚 &lt;strong&gt;static_cast, dynamic_cast, reinterpret_cast, const_cast&lt;/strong&gt; 的作用以及区别，花个时间学习并记录一下！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello My Blog</title>
    <link href="https://codroc.github.io/2021/03/05/hello-blog/"/>
    <id>https://codroc.github.io/2021/03/05/hello-blog/</id>
    <published>2021-03-05T11:57:16.000Z</published>
    <updated>2021-03-09T07:38:41.543Z</updated>
    
    <content type="html"><![CDATA[<p>早就有自己搭建一个博客的想法了，之前总是想着从无到有的搭建方式，由于难度较大就没有完成。一直拖着也不是办法，就先用博客框架吧，以后自己学习完前后端的知识再从头搭一个把文章转过去就行。这里要感谢 <a href="https://hexo.io/">hexo</a> 让我轻松完成了博客的搭建！</p><p>记录下搭建的过程吧，嘿嘿~~~</p><span id="more"></span><ul><li>机器架构: <strong>x86_64</strong></li><li>操作系统: <strong>18.04.1-Ubuntu</strong></li></ul><!-- vim-markdown-toc Marked --><ul><li><a href="#%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83">安装环境</a></li><li><a href="#%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2">美化博客</a></li><li><a href="#%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E8%AE%BE%E7%BD%AE">个人信息设置</a></li><li><a href="#%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6">生成静态文件</a></li><li><a href="#%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2">网站部署</a></li><li><a href="#%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0">发布文章</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6-hexo-admin">添加后台管理插件 hexo-admin</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- vim-markdown-toc --><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>安装 npm，可以去 github 上搜索 <a href="https://github.com/npm/npm">npm</a>，仓库的 README 有给出安装方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -qL https://www.npmjs.com/install.sh | sh</span><br></pre></td></tr></table></figure></li><li>安装并启动博客<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>Run server<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>当出现以下输出时：<strong>INFO  Hexo is running at <a href="http://localhost:4000/">http://localhost:4000</a> . Press Ctrl+C to stop.</strong> 就可以在浏览器上输入 <code>https://localhost:4000</code> 来访问博客了！<br>More info: <a href="https://hexo.io/docs/server.html">Server</a></li></ul><h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>挑选主题</p><ul><li>可以去 hexo 官网的 <a href="https://hexo.io/themes/">Themes</a> 菜单下挑选自己喜欢的主题</li><li>也可以去 github 搜索 hexo 然后选那些 star 比较多的主题</li></ul><p>挑选完毕之后，就需要把主题下载到本地的 <code>blog/themes</code> 目录下，例如我挑了个 <a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a> 主题，切换到 <code>blog/</code> 目录下并执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>Rerun Server 通过浏览器就能看到博客已经被美化了</p><h2 id="个人信息设置"><a href="#个人信息设置" class="headerlink" title="个人信息设置"></a>个人信息设置</h2><p>这个环节需要了解 2 个配置文件</p><ol><li><code>blog/</code> 目录下的 <code>_config.yml</code> 是用来配置站点信息的，例如可以改变博客网站的 Title，加上个人 Logo 等等</li><li><code>blog/themes/主题/</code> 目录下的 <code>_config.yml</code> 是用来配置主题的，例如设置导航栏，设置 SideBar 等等</li></ol><p>如果想要了解 <code>_config.yml</code> 中每个 Setting 信息，可以去 <a href="https://hexo.io/docs/configuration">hexo-config</a> 网站看看</p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p><strong>hexo</strong> 是一个静态博客框架，也就是说客户端发出请求后，服务器仅仅是将静态页面作为响应发送回去，并不涉及数据库的访问等等。因此在我们写好一篇博客后就可以让 css、js 进行渲染直接生成静态的 html</p><p>生成静态文件的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>执行完上述命令后，可以看到在 <code>blog/</code> 目录下多了个 <code>public/</code> 目录，这里面存储的就是静态文件了！</p><p>可以通过 <code>hexo clean</code> 命令删除 <code>public/</code> 目录</p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h2 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h2><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。</p><p>我把博客网站架在了 github 上。</p><p>在这一步很容易犯错导致最后部署失败。</p><ol><li>首先在 github 创建一个仓库，为了 100% 成功仓库名一定要是 <code>username.github.io</code> 其中 <code>username</code> 就是你 github 的用户名</li><li>配置 <code>blog/</code> 目录下的 <code>_config.yml</code> 文件，有两部分需要编辑<ul><li>找到 <code>_config.yml</code> 中的注释 <code>#Deployment</code> （如果没有就自己在文件最后加上），然后添加以下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Deployment</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io</span><br><span class="line">root: &#x2F;</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>注意：<strong>branch</strong> 需要看你创建的仓库的<strong>默认 branch</strong> 是什么再填写，我的<strong>默认 branch</strong> 是 <strong>master</strong>（有的可能是 <strong>main</strong>）</li><li>找到 <code>_config.yml</code> 中的注释 <code>#URL</code> （如果没有就自己加上），然后添加以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#39;https:&#x2F;&#x2F;username.github.io&#x2F;project&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;username.github.io&#x2F;   # 这里是你的仓库名</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br></pre></td></tr></table></figure>注意：如果你完全按照第 1 步的步骤，那么 url 的 username 就是你的 github 用户名</li></ul></li></ol><p>保存站点配置文件</p><p>其实就是给 <strong>hexo d</strong> 这个命令做相应的配置，让 hexo 知道你要把 blog 部署在哪个位置，很显然，我们部署在我们 github 的仓库里。最后安装 Git 部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令一键完成部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d 是 deploy 的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <code>http://xxxx.github.io</code> 其中 <code>xxx</code> 就是你的 github 用户名</p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>我们开始正式发布博客文章，在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">&quot;博客的名字&quot;</span></span><br></pre></td></tr></table></figure><p>我们会发现在 <code>blog/source/</code> 目录下的 <code>_post/</code> 目录中多了一个 <code>博客名字.md</code> 文件，使用 <strong>Markdown编辑器</strong> 打开，就可以开始你的个人博客之旅了，<strong>Markdown</strong> 常用的样式也就十来种，完全能够满足一般博文的样式要求。</p><p>通过带有预览样式的 <strong>Markdown</strong> 编辑器实时预览书写的博文样式，也可以通过命令 <strong>hexo s –debug</strong> 在本地浏览器的 <strong>localhost:4000</strong> 预览博文效果。写好博文并且样式无误后，通过 <strong>hexo g &amp;&amp; hexo d</strong> 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><p>以后写好的文章只要拖到 <code>blog/source/_post/</code> 目录下，<strong>hexo</strong> 会自动把文章渲染出来放到你的博客网站上</p><h2 id="添加后台管理插件-hexo-admin"><a href="#添加后台管理插件-hexo-admin" class="headerlink" title="添加后台管理插件 hexo-admin"></a>添加后台管理插件 hexo-admin</h2><p>如果没有后台管理功能每次写完 markdown 文章都需要放到 <code>blog/source/_post</code> 目录下并且 <code>hexo g &amp;&amp; hexo d</code> 来重新生成、部署网页，这样做有点麻烦，所以可以搞个 <a href="https://github.com/jaredly/hexo-admin">hexo-admin</a> 插件来帮助我们。</p><p>切换到根目录 <code>blog/</code>，安装 <a href="https://github.com/jaredly/hexo-admin">hexo-admin</a> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>用浏览器打开 <code>http://localhost:4000/admin/</code> 就能看到 <strong>后台UI</strong> 了！现在还没有创建用户密码，所以别人是能直接进入你的后台的，那么哪一天你一上自己的网站发现小广告漫天飞可不要感到奇怪哦~~~ 所以在后台的 Setting 中创建一个用户吧！最后把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">    username: username</span><br><span class="line">    password_hash: xxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">    secret: a secret something</span><br></pre></td></tr></table></figure><p>复制到 <code>blog/</code> 目录下的 <code>_config.yml</code> 文件的最后面就可以了。这样别人就不能随便进入你的后台了！</p><p>以后通过后台写完文章后可以点击 <code>Deploy</code> 菜单来提交。</p><p>但是我按了 <code>Deploy</code> 没反应是怎么回事？</p><p>原来是进入后台之后点击 Deploy，里面的 Deploy 按钮是用来执行发布脚本的，所以我们先在博客根目录下新建个目录 admin_script，然后在目录中新建一个脚本 hexo-g.sh，里面写下下面代码然后保存:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>然后给 hexo-g.sh 加入可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x hexo-g.sh</span><br></pre></td></tr></table></figure><p>然后在 <strong>_config.yml</strong> 中的 admin 下添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">    username: username</span><br><span class="line">    password_hash: xxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">    secret: a secret something</span><br><span class="line">    deployCommand: .&#x2F;admin_script&#x2F;hexo-d.sh</span><br></pre></td></tr></table></figure><p>再按下 <code>Deploy</code> 按钮，果然可以发布了！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></li><li><a href="https://www.jianshu.com/p/e542bea49c88">https://www.jianshu.com/p/e542bea49c88</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;早就有自己搭建一个博客的想法了，之前总是想着从无到有的搭建方式，由于难度较大就没有完成。一直拖着也不是办法，就先用博客框架吧，以后自己学习完前后端的知识再从头搭一个把文章转过去就行。这里要感谢 &lt;a href=&quot;https://hexo.io/&quot;&gt;hexo&lt;/a&gt; 让我轻松完成了博客的搭建！&lt;/p&gt;
&lt;p&gt;记录下搭建的过程吧，嘿嘿~~~&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
