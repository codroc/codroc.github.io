<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Codroc Blog</title>
  
  
  <link href="https://codroc.github.io/atom.xml" rel="self"/>
  
  <link href="https://codroc.github.io/"/>
  <updated>2021-03-09T07:42:13.757Z</updated>
  <id>https://codroc.github.io/</id>
  
  <author>
    <name>Codroc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ Type Casting</title>
    <link href="https://codroc.github.io/2021/03/09/typecasting/"/>
    <id>https://codroc.github.io/2021/03/09/typecasting/</id>
    <published>2021-03-08T16:00:00.000Z</published>
    <updated>2021-03-09T07:42:13.757Z</updated>
    
    <content type="html"><![CDATA[<p>一直搞不清楚 <strong>static_cast, dynamic_cast, reinterpret_cast, const_cast</strong> 的作用以及区别，花个时间学习并记录一下！</p><span id="more"></span><!-- vim-markdown-toc GFM --><ul><li><a href="#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">隐式类型转换</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2">类的隐式转换</a></li><li><a href="#%E5%9B%9B%E7%A7%8D-casting">四种 casting</a><ul><li><a href="#dynamic_cast">dynamic_cast</a></li><li><a href="#static_cast">static_cast</a></li><li><a href="#reinterpret_cast">reinterpret_cast</a></li><li><a href="#const_cast">const_cast</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- vim-markdown-toc --><h1 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h1><p>当一个值拷贝到与其类型相兼容的类型时，隐式类型转换会自动执行，这个在 POD(Plain Old Data) 或基础数据类型中经常看到，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><p>这里，short 类型的对象 a，首先隐式转换成 int 类型，然后直接赋值给了 int 类型的对象 b。这是我们所熟知的标准类型转换。标准类型转换作用于基础数据类型，并且允许数值类型 (short to int, int to float, double to int …) 到 bool 类型或 bool 类型到数值类型的转换，当然还有一些指针类型的转换，这些都是标准类型转换。</p><p>从一些较小的 integer 类型转换到 int 类型的时候，或是从 float 类型转换到 double 类型的时候，是保证不会丢失精度的，保证值是不会变的，可以把这种转换称之为“提升”(promoted)。其他数值类型之间的转换并不能保证值不变：</p><ul><li>integer 类型转换到 unsigned integer 类型，最高位的 1 的语义将会发送改变，从原来表示符号变成表示数值。（即：原来的 -1 如今变成了最大的值，-2 变成第二大的值 …）</li><li><strong>bool</strong> 类型的 <strong>false</strong> 相当于数值类型的 <strong>0</strong> 以及指针类型的 <strong>nullptr</strong>；然而 <strong>bool</strong> 类型的 <strong>false</strong> 相当于数值类型除 0 以外的所有值，如果把 <strong>false</strong> 转成数值类型的话，那将会是 1。</li><li>如果转换发生在浮点类型到整数类型上，那么结果将会被截断，如果结果超过了整数类型所能表示的范围，那么这个转换将会导致未定义的行为。</li><li>如果转换发生在相似类型之间（integer to integer, floating to floating）那么这个转换是有效的，但是具体的值视情况而定（并且这种转换可能是不可移植的 non-portable）</li></ul><p>上述的这些隐式转换中，有一些是会损失精度的，那些会损失精度的转换会有编译器给出警告，你可以通过显示转换来消除警告。</p><p>对于非基础数据类型而言，数组和函数能够隐式转换为指针，并且指针通常允许以下几种转换：</p><ul><li>空指针（nullptr）可以转换到指向任意类型的指针</li><li>指向任意类型的指针能够转换到指向 void 的指针</li><li><em>Pointer upcast</em>: 指向派生类的指针能够在不改变 <strong>const</strong> 或 <strong>volatile</strong> 约束条件的情况下转换成指向其基类的指针。</li></ul><h1 id="类的隐式转换"><a href="#类的隐式转换" class="headerlink" title="类的隐式转换"></a>类的隐式转换</h1><p>对于类来说，可以通过以下三种成员函数来控制隐式类型转换：</p><ul><li><strong>Single-argument Constructor</strong>: 允许从特定类型隐式转换来初始化对象。</li><li><strong>Assignment operator</strong>: 允许从特定类型隐式转换给对象赋值。</li><li><strong>type-cast operator</strong>: 允许隐式转换到一个特定类型。</li></ul><p>举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implicit conversion of classes:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// conversion from A (constructor):</span></span><br><span class="line">  B (<span class="keyword">const</span> A&amp; x) &#123;&#125;</span><br><span class="line">  <span class="comment">// conversion from A (assignment):</span></span><br><span class="line">  B&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> A&amp; x) &#123;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">  <span class="comment">// conversion to A (type-cast operator)</span></span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">A</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> A();&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  A foo;</span><br><span class="line">  B bar = foo;    <span class="comment">// calls constructor</span></span><br><span class="line">  bar = foo;      <span class="comment">// calls assignment</span></span><br><span class="line">  foo = bar;      <span class="comment">// calls type-cast operator</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>type-cast operator</strong> 使用特殊的语法，它使用 <strong>operator</strong> 作为关键字，在其后跟转换后的类型以及一对空括号。返回值类型就是转换后的类型，所以就没必要在 <strong>operator</strong> 前加上返回值类型了。</p><h1 id="四种-casting"><a href="#四种-casting" class="headerlink" title="四种 casting"></a>四种 casting</h1><p>C++ 是一门强类型语言。许多转换都需要显式的说明，特别是那写具有不同值语义的转换。下面就有个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10.3</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = <span class="keyword">int</span> (x); <span class="comment">//functional notation</span></span><br><span class="line">y = (<span class="keyword">int</span>) x; <span class="comment">// c-like cast notation</span></span><br></pre></td></tr></table></figure><p>对于基础数据类型而言，以上两种同用的显式转换方式已经够用了。然而，如果对类，类指针不加区分地使用上述地方式会导致程序的运行时错误（即使编译是能通过的）。举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class type-casting</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dummy</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> i,j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Addition</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Addition (<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; x=a; y=b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">result</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x+y;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  Dummy d;</span><br><span class="line">  Addition * padd;</span><br><span class="line">  padd = (Addition*) &amp;d;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; padd-&gt;result();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译能通过，但是会产生运行时错误。程序声明了一个类 <strong>Dummy</strong> 的对象 <strong>d</strong> 和指向 <strong>Addition</strong> 的指针 <strong>padd</strong>，然后把 <strong>d</strong> 的地址经过显式强制类型转换到指向 <strong>Addition</strong> 的指针再赋值给 <strong>padd</strong>，随后调用了类 <strong>Addition</strong> 的方法。</p><p>在 C++ 的显示强制类型转换可以在任意两种类型之间进行，这就回来带巨大的隐患，想一想，一种类型被显式地强制类型转换到另一种完全不相关的类型，然后在调用该类型的操作会导致什么情况，毫无疑问会产生运行时错误，轻则 core dump，重则程序不声不响的继续给你允许下去，你完全不知道哪里出问题了，然后用了很长事件来找错，浪费时间浪费精力，哎~~~</p><p>不受限制的显式类型转换允许指针的类型转换到指向其他的任意类型，甚至是于其原本毫不相关的类型。</p><p>为了控制这些在类型间的转换，C++ 就引入了四种转换操作符：<strong>dynamic_cast</strong>，<strong>reinterpret_cast</strong>，<strong>static_cast</strong>，<strong>const_cast</strong>。它们具有相同的使用格式，&lt;&gt; 内是要转换的类型，() 内是将要被转换的表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic_cast</span> &lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">reinterpret_cast</span> &lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">static_cast</span> &lt;new_type&gt; (expression)</span><br><span class="line"><span class="keyword">const_cast</span> &lt;new_type&gt; (expression)</span><br></pre></td></tr></table></figure><h2 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2><p><strong>dynamic_cast</strong> 能够作用在指向类对象的指针或引用上（或作用在 void*)。它保证了类型转换后的结果指针（引用）一定指向有效的完整的类对象。</p><p>它不仅能把指向类对象的指针 <em>upcast</em> (converting from pointer-to-derived to pointer-to-base) ，还能 <em>downcast</em> (convert from pointer-to-base to pointer-to-derived) 到指向多态类对象（带有虚成员函数的类），但是这个类对象必须是有效且完整的。举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dynamic_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123; <span class="keyword">int</span> a; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Base * pba = <span class="keyword">new</span> Derived;</span><br><span class="line">    Base * pbb = <span class="keyword">new</span> Base;</span><br><span class="line">    Derived * pd;</span><br><span class="line"></span><br><span class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pba);</span><br><span class="line">    <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Null pointer on first type-cast.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pbb);</span><br><span class="line">    <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Null pointer on second type-cast.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (exception&amp; e) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Exception: &quot;</span> &lt;&lt; e.what();&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码跑起来后会输出以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Null pointer on second type-cast.</span><br></pre></td></tr></table></figure><p>上面的代码尝试执行从指向 <strong>Base</strong> 类型的指针对象 ( pba 和 pbb ) 到指向 <strong>Derived</strong>类型的指针对象的两次动态强制转换，但只有第一次成功。注意它们各自的初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base * pba = <span class="keyword">new</span> Derived;</span><br><span class="line">Base * pbb = <span class="keyword">new</span> Base;</span><br></pre></td></tr></table></figure><p>尽管两者都是指向 <strong>Base</strong> 类型的指针，但 pba 实际上指向的是 <strong>Derived</strong> 类型的对象，而 pbb 指向的是 <strong>Base</strong> 类型的对象。因此，当使用动态强制转换执行它们各自的类型转换时，pba 指向的是 <strong>class Derived</strong> 的完整对象，而 pbb 指向的是 <strong>class Base</strong> 的对象，这是 <strong>class Derived</strong> 的不完整对象。</p><p>当 <strong>dynamic_cast</strong> 转换由于不满足目标类是有效且完整这个条件的时候，它会返回 <em>null</em> 指针来表示转换失败了，如果 <strong>dynamic_cast</strong> 用来转换引用类型并且失败了，它会抛出一个 <strong>bad_cast</strong> 的异常。</p><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h2><p><strong>static_cast</strong> 也能完成 <em>upcast</em> 和 <em>downcast</em>，和 <strong>dynamic_cast</strong> 的唯一区别就在于，它不会帮你检查转换后的类型是否是有效且完整的，这个检查得你自己来做，这么做有好处也有坏处。好处在于降低了运行时开销，坏处是需要程序员对自己的代码十分了解。</p><p><strong>dynamic_cast</strong> 能做的 <strong>static_cast</strong> 都能做，初次之外，它还能对以下几种情况进行转换：</p><ul><li>显式调用单参数构造函数（Single-argument constructor）或转换操作符（type-cast operator）。</li><li>转换到右值引用</li><li>把 <strong>enum class</strong> 转换成整数类型或浮点类型</li><li>把任意类型转换到 <strong>void</strong> 类型</li></ul><p>注意：<strong>static_cast</strong> 不能转换掉 <strong>expression</strong> 的 <strong>const、volatile、或者 __unaligned</strong> 属性。<br><strong>C++ primer第五章</strong> 里写了编译器隐式执行任何类型转换都可由 <strong>static_cast</strong> 显示完成</p><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h2><p><strong>reinterpret_cast</strong> 能够将任意指针类型转换为任意其他指针类型，即使是不相关的类。它的操作结果是简单的二进制位的拷贝和赋值，什么意思呢？看看下面的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">&quot;This is an example.&quot;</span>;</span><br><span class="line">i = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>&gt;(p);</span><br></pre></td></tr></table></figure><p>这里 <strong>i</strong> 是 <em>int</em> 类型的，<strong>p</strong> 是指向 <em>char</em> 类型的指针对象，这是两个完全不相关的类型，<code>i = reinterpret_cast&lt;int&gt;(p)</code> 操作就是简单把对象 <em>p</em> 的地址处的二进制值原封不动地存放到对象 <em>i</em> 的地址处。所以你可以打印出 <em>p</em> 和 <em>i</em> 地址处存放的值，可以看到是完全一样的。由于 <em>int</em> 类型为 4 个字节，<em>char</em> 类型为 1 个字节，所以<strong>转换前后没有数位损失</strong>。</p><h2 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h2><p><strong>const_cast</strong> 一般用于强制消除对象的常量性。它是唯一能做到这一点的 C++ 风格的强制转型。这个转换能剥离一个对象的 <strong>const属性</strong>，也就是说允许你对常量进行修改:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">char</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">&quot;sample text&quot;</span>;</span><br><span class="line">  print ( <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt; (c) );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>print</strong> 函数只接受 <strong>non-const</strong> 数据，那你就可以用 <strong>const_cast</strong> 去除对象 <strong>c</strong> 的 <strong>const</strong> 属性。</p><p>上面的例子保证可以工作，因为函数 <strong>print</strong> 不会往指向的对象写数据。但是请注意：移除指向对象的常量后，实际向它写入数据会导致未定义的行为。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.cplusplus.com/doc/tutorial/typecasting/">http://www.cplusplus.com/doc/tutorial/typecasting/</a></li><li><a href="https://www.cnblogs.com/heyonggang/p/3361643.html">https://www.cnblogs.com/heyonggang/p/3361643.html</a></li><li>《C++ Primer 第 5 版》</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直搞不清楚 &lt;strong&gt;static_cast, dynamic_cast, reinterpret_cast, const_cast&lt;/strong&gt; 的作用以及区别，花个时间学习并记录一下！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello My Blog</title>
    <link href="https://codroc.github.io/2021/03/05/hello-blog/"/>
    <id>https://codroc.github.io/2021/03/05/hello-blog/</id>
    <published>2021-03-05T11:57:16.000Z</published>
    <updated>2021-03-09T07:38:41.543Z</updated>
    
    <content type="html"><![CDATA[<p>早就有自己搭建一个博客的想法了，之前总是想着从无到有的搭建方式，由于难度较大就没有完成。一直拖着也不是办法，就先用博客框架吧，以后自己学习完前后端的知识再从头搭一个把文章转过去就行。这里要感谢 <a href="https://hexo.io/">hexo</a> 让我轻松完成了博客的搭建！</p><p>记录下搭建的过程吧，嘿嘿~~~</p><span id="more"></span><ul><li>机器架构: <strong>x86_64</strong></li><li>操作系统: <strong>18.04.1-Ubuntu</strong></li></ul><!-- vim-markdown-toc Marked --><ul><li><a href="#%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83">安装环境</a></li><li><a href="#%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2">美化博客</a></li><li><a href="#%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E8%AE%BE%E7%BD%AE">个人信息设置</a></li><li><a href="#%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6">生成静态文件</a></li><li><a href="#%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2">网站部署</a></li><li><a href="#%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0">发布文章</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6-hexo-admin">添加后台管理插件 hexo-admin</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- vim-markdown-toc --><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>安装 npm，可以去 github 上搜索 <a href="https://github.com/npm/npm">npm</a>，仓库的 README 有给出安装方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -qL https://www.npmjs.com/install.sh | sh</span><br></pre></td></tr></table></figure></li><li>安装并启动博客<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>Run server<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>当出现以下输出时：<strong>INFO  Hexo is running at <a href="http://localhost:4000/">http://localhost:4000</a> . Press Ctrl+C to stop.</strong> 就可以在浏览器上输入 <code>https://localhost:4000</code> 来访问博客了！<br>More info: <a href="https://hexo.io/docs/server.html">Server</a></li></ul><h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>挑选主题</p><ul><li>可以去 hexo 官网的 <a href="https://hexo.io/themes/">Themes</a> 菜单下挑选自己喜欢的主题</li><li>也可以去 github 搜索 hexo 然后选那些 star 比较多的主题</li></ul><p>挑选完毕之后，就需要把主题下载到本地的 <code>blog/themes</code> 目录下，例如我挑了个 <a href="https://github.com/iissnan/hexo-theme-next">hexo-theme-next</a> 主题，切换到 <code>blog/</code> 目录下并执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>Rerun Server 通过浏览器就能看到博客已经被美化了</p><h2 id="个人信息设置"><a href="#个人信息设置" class="headerlink" title="个人信息设置"></a>个人信息设置</h2><p>这个环节需要了解 2 个配置文件</p><ol><li><code>blog/</code> 目录下的 <code>_config.yml</code> 是用来配置站点信息的，例如可以改变博客网站的 Title，加上个人 Logo 等等</li><li><code>blog/themes/主题/</code> 目录下的 <code>_config.yml</code> 是用来配置主题的，例如设置导航栏，设置 SideBar 等等</li></ol><p>如果想要了解 <code>_config.yml</code> 中每个 Setting 信息，可以去 <a href="https://hexo.io/docs/configuration">hexo-config</a> 网站看看</p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p><strong>hexo</strong> 是一个静态博客框架，也就是说客户端发出请求后，服务器仅仅是将静态页面作为响应发送回去，并不涉及数据库的访问等等。因此在我们写好一篇博客后就可以让 css、js 进行渲染直接生成静态的 html</p><p>生成静态文件的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>执行完上述命令后，可以看到在 <code>blog/</code> 目录下多了个 <code>public/</code> 目录，这里面存储的就是静态文件了！</p><p>可以通过 <code>hexo clean</code> 命令删除 <code>public/</code> 目录</p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h2 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h2><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。</p><p>我把博客网站架在了 github 上。</p><p>在这一步很容易犯错导致最后部署失败。</p><ol><li>首先在 github 创建一个仓库，为了 100% 成功仓库名一定要是 <code>username.github.io</code> 其中 <code>username</code> 就是你 github 的用户名</li><li>配置 <code>blog/</code> 目录下的 <code>_config.yml</code> 文件，有两部分需要编辑<ul><li>找到 <code>_config.yml</code> 中的注释 <code>#Deployment</code> （如果没有就自己在文件最后加上），然后添加以下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Deployment</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io</span><br><span class="line">root: &#x2F;</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>注意：<strong>branch</strong> 需要看你创建的仓库的<strong>默认 branch</strong> 是什么再填写，我的<strong>默认 branch</strong> 是 <strong>master</strong>（有的可能是 <strong>main</strong>）</li><li>找到 <code>_config.yml</code> 中的注释 <code>#URL</code> （如果没有就自己加上），然后添加以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#39;https:&#x2F;&#x2F;username.github.io&#x2F;project&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;username.github.io&#x2F;   # 这里是你的仓库名</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br></pre></td></tr></table></figure>注意：如果你完全按照第 1 步的步骤，那么 url 的 username 就是你的 github 用户名</li></ul></li></ol><p>保存站点配置文件</p><p>其实就是给 <strong>hexo d</strong> 这个命令做相应的配置，让 hexo 知道你要把 blog 部署在哪个位置，很显然，我们部署在我们 github 的仓库里。最后安装 Git 部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令一键完成部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d 是 deploy 的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <code>http://xxxx.github.io</code> 其中 <code>xxx</code> 就是你的 github 用户名</p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>我们开始正式发布博客文章，在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">&quot;博客的名字&quot;</span></span><br></pre></td></tr></table></figure><p>我们会发现在 <code>blog/source/</code> 目录下的 <code>_post/</code> 目录中多了一个 <code>博客名字.md</code> 文件，使用 <strong>Markdown编辑器</strong> 打开，就可以开始你的个人博客之旅了，<strong>Markdown</strong> 常用的样式也就十来种，完全能够满足一般博文的样式要求。</p><p>通过带有预览样式的 <strong>Markdown</strong> 编辑器实时预览书写的博文样式，也可以通过命令 <strong>hexo s –debug</strong> 在本地浏览器的 <strong>localhost:4000</strong> 预览博文效果。写好博文并且样式无误后，通过 <strong>hexo g &amp;&amp; hexo d</strong> 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><p>以后写好的文章只要拖到 <code>blog/source/_post/</code> 目录下，<strong>hexo</strong> 会自动把文章渲染出来放到你的博客网站上</p><h2 id="添加后台管理插件-hexo-admin"><a href="#添加后台管理插件-hexo-admin" class="headerlink" title="添加后台管理插件 hexo-admin"></a>添加后台管理插件 hexo-admin</h2><p>如果没有后台管理功能每次写完 markdown 文章都需要放到 <code>blog/source/_post</code> 目录下并且 <code>hexo g &amp;&amp; hexo d</code> 来重新生成、部署网页，这样做有点麻烦，所以可以搞个 <a href="https://github.com/jaredly/hexo-admin">hexo-admin</a> 插件来帮助我们。</p><p>切换到根目录 <code>blog/</code>，安装 <a href="https://github.com/jaredly/hexo-admin">hexo-admin</a> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>用浏览器打开 <code>http://localhost:4000/admin/</code> 就能看到 <strong>后台UI</strong> 了！现在还没有创建用户密码，所以别人是能直接进入你的后台的，那么哪一天你一上自己的网站发现小广告漫天飞可不要感到奇怪哦~~~ 所以在后台的 Setting 中创建一个用户吧！最后把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">    username: username</span><br><span class="line">    password_hash: xxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">    secret: a secret something</span><br></pre></td></tr></table></figure><p>复制到 <code>blog/</code> 目录下的 <code>_config.yml</code> 文件的最后面就可以了。这样别人就不能随便进入你的后台了！</p><p>以后通过后台写完文章后可以点击 <code>Deploy</code> 菜单来提交。</p><p>但是我按了 <code>Deploy</code> 没反应是怎么回事？</p><p>原来是进入后台之后点击 Deploy，里面的 Deploy 按钮是用来执行发布脚本的，所以我们先在博客根目录下新建个目录 admin_script，然后在目录中新建一个脚本 hexo-g.sh，里面写下下面代码然后保存:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>然后给 hexo-g.sh 加入可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x hexo-g.sh</span><br></pre></td></tr></table></figure><p>然后在 <strong>_config.yml</strong> 中的 admin 下添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">    username: username</span><br><span class="line">    password_hash: xxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">    secret: a secret something</span><br><span class="line">    deployCommand: .&#x2F;admin_script&#x2F;hexo-d.sh</span><br></pre></td></tr></table></figure><p>再按下 <code>Deploy</code> 按钮，果然可以发布了！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></li><li><a href="https://www.jianshu.com/p/e542bea49c88">https://www.jianshu.com/p/e542bea49c88</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;早就有自己搭建一个博客的想法了，之前总是想着从无到有的搭建方式，由于难度较大就没有完成。一直拖着也不是办法，就先用博客框架吧，以后自己学习完前后端的知识再从头搭一个把文章转过去就行。这里要感谢 &lt;a href=&quot;https://hexo.io/&quot;&gt;hexo&lt;/a&gt; 让我轻松完成了博客的搭建！&lt;/p&gt;
&lt;p&gt;记录下搭建的过程吧，嘿嘿~~~&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
